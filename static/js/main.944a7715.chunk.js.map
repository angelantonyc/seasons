{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","console","log","time","className","Spinner","message","defaultProps","App","state","toLocaleTimeString","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","setInterval","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"8MAGMA,EAAe,CACjBC,OAAQ,CACJC,KAAM,sBACVC,SAAU,OACVC,OAAQ,CACJF,KAAM,iBACNC,SAAU,cAwBHE,EAfO,SAACC,GACnB,IAReC,EAAKC,EAQdC,GARSF,EAQUD,EAAMC,KARXC,GAQgB,IAAIE,MAAOC,YAPnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAS,UAGD,EAEFP,EAAaS,GAAhCP,EAFqB,EAErBA,KAAMC,EAFe,EAEfA,SAEd,OADAS,QAAQC,IAAIP,EAAMQ,MAEd,gCAAK,qBAAIC,UAAS,aAAb,6BAA8CT,EAAMQ,QACzD,sBAAKC,UAAS,yBAAoBN,GAAlC,UACI,mBAAGM,UAAS,4BAAuBZ,EAAvB,WAEhB,6BAAKD,IACL,mBAAGa,UAAS,6BAAwBZ,EAAxB,kBC1Bda,G,MAAU,SAACV,GACb,OACI,qBAAKS,UAAU,mBAAf,SACI,qBAAKA,UAAU,qBAAf,SAAqCT,EAAMW,cAKvDD,EAAQE,aAAe,CACnBD,QAAU,cAECD,QCQTG,E,4MAUFC,MAAQ,CAAEb,IAAK,KAAMO,MAAM,IAAIJ,MAAOW,qBAAsBC,aAAc,I,uDAE1E,WAAqB,IAAD,OAChBV,QAAQC,IAAI,2CACZU,OAAOC,UAAUC,YAAYC,oBACzB,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAErB,IAAKoB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAAEN,aAAcS,EAAId,aAE/Ce,aAAY,WACR,EAAKJ,SAAS,CAAEd,MAAM,IAAIJ,MAAOW,yBAClC,O,2BAMP,WACI,OAAIY,KAAKb,MAAME,eAAiBW,KAAKb,MAAMb,IAChC,0CAAa0B,KAAKb,MAAME,iBAE9BW,KAAKb,MAAME,cAAgBW,KAAKb,MAAMb,IAChC,cAAC,EAAD,CAAeA,IAAK0B,KAAKb,MAAMb,IAAKO,KAAMmB,KAAKb,MAAMN,OAEzD,cAAC,EAAD,CAASG,QAAQ,qC,oBAI5B,WAGI,OAFAL,QAAQC,IAAIoB,KAAKb,MAAMb,KACvBK,QAAQC,IAAIoB,KAAKb,MAAMN,MAEnB,qBAAKC,UAAU,WAAf,SACKkB,KAAKC,sB,GA1CJC,IAAMC,WAiDxBC,IAASC,OACL,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.944a7715.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\n\nconst seasonConfig = {\n    summer: {\n        text: \"Let's hit the beach\",\n    iconName: 'sun'},\n    winter: {\n        text: \"Burr, Its cold\",\n        iconName: 'snowflake'}\n}\nconst getSeason = (lat, month) => {\n    if (month > 2 && month < 9) {\n        return lat > 0 ? 'summer' : 'winter';\n    } else {\n        return lat > 0 ? 'winter':'summer';\n    }\n}\nconst SeasonDisplay = (props) => {\n    const season = getSeason(props.lat, new Date().getMonth());\n    const { text, iconName } = seasonConfig[season];  //text,iconName\n    console.log(props.time);\n    return (\n        <div><h3 className={`rightAlign`}>Current time is:{props.time}</h3>\n        <div className={`season-display ${season}`}>\n            <i className={`icon-left massive ${iconName} icon`} />\n            \n        <h1>{text}</h1>\n        <i className={`icon-right massive ${iconName} icon`} />\n            </div>\n        </div>\n    );\n}\nexport default SeasonDisplay;","import React from 'react';\n\nconst Spinner = (props) => {\n    return (\n        <div className=\"ui active dimmer\">\n            <div className=\"ui big text loader\">{props.message}</div>\n        </div>\n    )\n}\n\nSpinner.defaultProps = {\n    message : 'Loading...'\n}\nexport default Spinner;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport \"semantic-ui-css/semantic.min.css\";\nimport Spinner from './Spinner';\n\n//functional component approach\n// const App = () => {\n//     window.navigator.geolocation.getCurrentPosition((position) => console.log(position), (err) => console.log(err))\n//     return <div>Latitude: </div>;\n// }\n\n//class component approach\n// class App extends React.Component{\n//     render() {\n//         window.navigator.geolocation.getCurrentPosition((position) => console.log(position), (err) => console.log(err))\n//         return <div>Latitude: </div>;\n//     }\n// }\n\n//class component approach using state\nclass App extends React.Component {\n\n    // constructor(props) {\n    //     super(props); //super means parent\n    //     //initialising state inside constructor, direct assignement only at the time of initialisation\n    //     this.state = { lat: null, errorMessage: '' };  \n        \n    // }\n\n    //initialising state without constructor, constructor not using because babel will create it automatically\n    state = { lat: null, time: new Date().toLocaleTimeString(), errorMessage: '' };\n\n    componentDidMount() {\n        console.log('My component was rendered to the screen');\n        window.navigator.geolocation.getCurrentPosition(\n            (position) => this.setState({ lat: position.coords.latitude }), //always update state using setState,\n            (err) => this.setState({ errorMessage: err.message })\n        );\n        setInterval(() => {\n            this.setState({ time: new Date().toLocaleTimeString()})\n        }, 1000)\n    }\n    // componentDidUpdate() {\n    //     console.log('My component was just updated! - it rerendered ');\n    // }\n\n    renderContent() {\n        if (this.state.errorMessage && !this.state.lat) {\n            return <div>Error: {this.state.errorMessage}</div>\n        }\n        if (!this.state.errorMessage && this.state.lat) {\n            return <SeasonDisplay lat={this.state.lat} time={this.state.time}/>;\n        }\n        return <Spinner message=\"Please accept location request\" />;\n\n    }\n    //React says we have to define render\n    render() {\n        console.log(this.state.lat);\n        console.log(this.state.time);\n        return (\n            <div className=\"fontSize\">\n                {this.renderContent()}\n            </div>\n        )\n\n    }\n}\n\nReactDOM.render(\n    <App />, document.querySelector('#root')\n)"],"sourceRoot":""}